{"version":3,"file":"ExtractorPlugin.js","sourceRoot":"","sources":["../../src/struct/ExtractorPlugin.ts"],"names":[],"mappings":";;;AAAA,wBAA2B;AAC3B,0BAAgC;AAIhC;;;;GAIG;AACH,MAAsB,eAAgB,SAAQ,SAAM;IAApD;;QACE;;;;;;;;;;;WAWG;QACH,SAAI,GAAG,cAAU,CAAC,SAAS,CAAC;IAe9B,CAAC;CAAA;AA5BD,0CA4BC","sourcesContent":["import { Plugin } from \".\";\nimport { PluginType } from \"..\";\nimport type { Playlist, Song } from \".\";\nimport type { GuildMember } from \"discord.js\";\n\n/**\n * Extractor Plugin\n * @extends Plugin\n * @abstract\n */\nexport abstract class ExtractorPlugin extends Plugin {\n  /**\n   * Resolve the validated url to a {@link Song} or a {@link Playlist}.\n   *\n   * @param {string} url URL\n   * @param {Object} [options] Optional options\n   * @param {Discord.GuildMember} [options.member] Requested user\n   * @param {*} [options.metadata] Metadata\n   * @returns {Promise<Song|Playlist>}\n   * @method resolve\n   * @memberof ExtractorPlugin#\n   * @abstract\n   */\n  type = PluginType.EXTRACTOR;\n  /**\n   * Resolve the validated url to a {@link Song} or a {@link Playlist}.\n   *\n   * @param {string} url URL\n   * @param {Object} [options] Optional options\n   * @param {Discord.GuildMember} [options.member] Requested user\n   * @param {*} [options.metadata] Metadata\n   * @returns {Promise<Song|Playlist>}\n   * @abstract\n   */\n  abstract resolve<T = unknown>(\n    url: string,\n    options: { member?: GuildMember; metadata?: T },\n  ): Promise<Song<T> | Playlist<T>>;\n}\n"]}
{"version":3,"file":"Song.js","sourceRoot":"","sources":["../../src/struct/Song.ts"],"names":[],"mappings":"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","sourcesContent":["import { Playlist } from \"./Playlist\";\nimport { DisTubeError, formatDuration, isMemberInstance, parseNumber, toSecond } from \"..\";\nimport type ytdl from \"@distube/ytdl-core\";\nimport type { GuildMember, User } from \"discord.js\";\nimport type { Chapter, OtherSongInfo, SearchResult } from \"..\";\n\n// TODO: Clean parameters on the next major version.\n\n/**\n * Class representing a song.\n *\n * <info>If {@link Song} is added from a YouTube {@link SearchResult} or {@link Playlist},\n * some info will be missing to save your resources. It will be filled when emitting {@link DisTube#playSong} event.\n *\n * Missing info: {@link Song#likes}, {@link Song#dislikes}, {@link Song#streamURL},\n * {@link Song#related}, {@link Song#chapters}, {@link Song#age_restricted}</info>\n * @template T - The type for the metadata (if any) of the song\n */\nexport class Song<T = unknown> {\n  source!: string;\n  metadata!: T;\n  formats?: ytdl.videoFormat[];\n  member?: GuildMember;\n  user?: User;\n  id?: string;\n  name?: string;\n  isLive!: boolean;\n  duration!: number;\n  formattedDuration?: string;\n  url!: string;\n  streamURL?: string;\n  thumbnail?: string;\n  related!: Omit<Song, \"related\">[];\n  views!: number;\n  likes!: number;\n  dislikes!: number;\n  uploader!: {\n    name?: string;\n    url?: string;\n  };\n  age_restricted!: boolean;\n  chapters!: Chapter[];\n  reposts!: number;\n  playlist?: Playlist;\n  constructor(info: ytdl.videoInfo | SearchResult | OtherSongInfo | ytdl.relatedVideo);\n  /** @deprecated Passing GuildMember for DisTube#Song() is deprecated. */\n  constructor(\n    info: ytdl.videoInfo | SearchResult | OtherSongInfo | ytdl.relatedVideo,\n    member?: GuildMember,\n    source?: string,\n    metadata?: T,\n  );\n  /**\n   * Create a Song\n   * @param {ytdl.videoInfo|SearchResult|OtherSongInfo} info Raw info\n   * @param {Object} [options] Optional options\n   * @param {Discord.GuildMember} [options.member] Requested user\n   * @param {string} [options.source=\"youtube\"] Song source\n   * @param {T} [options.metadata] Song metadata\n   */\n  constructor(\n    info: ytdl.videoInfo | SearchResult | OtherSongInfo | ytdl.relatedVideo,\n    options?: {\n      member?: GuildMember;\n      source?: string;\n      metadata?: T;\n    },\n  );\n  constructor(\n    info: ytdl.videoInfo | SearchResult | OtherSongInfo | ytdl.relatedVideo,\n    options:\n      | GuildMember\n      | {\n          member?: GuildMember;\n          source?: string;\n          metadata?: T;\n        } = {},\n    src = \"youtube\",\n    meta?: T,\n  ) {\n    if (isMemberInstance(options)) {\n      process.emitWarning(\n        \"Passing GuildMember for DisTube#Song() is deprecated, read the docs for more.\",\n        \"DeprecationWarning\",\n      );\n      return new Song(info, { member: options, source: src, metadata: meta });\n    }\n\n    const { member, source, metadata } = Object.assign({ source: \"youtube\" }, options);\n\n    if (\n      typeof source !== \"string\" ||\n      ((info as OtherSongInfo).src && typeof (info as OtherSongInfo).src !== \"string\")\n    ) {\n      throw new DisTubeError(\"INVALID_TYPE\", \"string\", source, \"source\");\n    }\n    /**\n     * The source of the song\n     * @type {string}\n     */\n    this.source = ((info as OtherSongInfo)?.src || source).toLowerCase();\n    this._patchMember(member);\n    if (this.source === \"youtube\") {\n      this._patchYouTube(info as ytdl.videoInfo);\n    } else {\n      this._patchOther(info as OtherSongInfo);\n    }\n    /**\n     * Optional metadata that can be used to identify the song.\n     * @type {T}\n     */\n    this.metadata = metadata as T;\n  }\n\n  _patchYouTube(i: ytdl.videoInfo | SearchResult) {\n    // FIXME\n    const info = i as any;\n    if ((info as any).full === true) {\n      /**\n       * Stream formats (Available if the song is from YouTube and playing)\n       * @type {ytdl.videoFormat[]?}\n       * @private\n       */\n      this.formats = info.formats;\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      const err = require(\"@distube/ytdl-core/lib/utils\").playError(info.player_response, [\n        \"UNPLAYABLE\",\n        \"LIVE_STREAM_OFFLINE\",\n        \"LOGIN_REQUIRED\",\n      ]);\n      if (err) throw err;\n\n      if (!info.formats?.length) throw new DisTubeError(\"UNAVAILABLE_VIDEO\");\n    }\n    const details = info.videoDetails || info;\n    /**\n     * YouTube video id\n     * @type {string?}\n     */\n    this.id = details.videoId || details.id;\n    /**\n     * Song name aka video title.\n     * @type {string?}\n     */\n    this.name = details.title || details.name;\n    /**\n     * Indicates if the video is an active live.\n     * @type {boolean}\n     */\n    this.isLive = !!details.isLive;\n    /**\n     * Song duration.\n     * @type {number}\n     */\n    this.duration = this.isLive ? 0 : toSecond(details.lengthSeconds || details.length_seconds || details.duration);\n    /**\n     * Formatted duration string (`hh:mm:ss`, `mm:ss` or `Live`).\n     * @type {string?}\n     */\n    this.formattedDuration = this.isLive ? \"Live\" : formatDuration(this.duration);\n    /**\n     * Song URL.\n     * @type {string}\n     */\n    this.url = `https://www.youtube.com/watch?v=${this.id}`;\n    /**\n     * Stream / Download URL (Available if the song is playing)\n     * @type {string?}\n     */\n    this.streamURL = undefined;\n    /**\n     * Song thumbnail.\n     * @type {string?}\n     */\n    this.thumbnail =\n      details.thumbnails?.sort((a: any, b: any) => b.width - a.width)[0].url ||\n      details.thumbnail?.url ||\n      details.thumbnail;\n    /**\n     * Related songs (without {@link Song#related} properties)\n     * @type {Song[]}\n     */\n    this.related =\n      info?.related_videos?.map((v: any) => new Song(v, { source: this.source, metadata: this.metadata })) ||\n      details.related ||\n      [];\n    /**\n     * Song views count\n     * @type {number}\n     */\n    this.views = parseNumber(details.viewCount || details.view_count || details.views);\n    /**\n     * Song like count\n     * @type {number}\n     */\n    this.likes = parseNumber(details.likes);\n    /**\n     * Song dislike count\n     * @type {number}\n     */\n    this.dislikes = parseNumber(details.dislikes);\n    /**\n     * Song uploader\n     * @type {Object}\n     * @prop {string?} name Uploader name\n     * @prop {string?} url Uploader url\n     */\n    this.uploader = {\n      name: info.uploader?.name || details.author?.name,\n      url: info.uploader?.url || details.author?.channel_url || details.author?.url,\n    };\n    /**\n     * Whether or not an age-restricted content\n     * @type {boolean}\n     */\n    this.age_restricted = !!details.age_restricted;\n    /**\n     * @typedef {Object} Chapter\n     * @prop {string} title Chapter title\n     * @prop {number} start_time Chapter start time in seconds\n     */\n    /**\n     * Chapters information (YouTube only)\n     * @type {Chapter[]}\n     */\n    this.chapters = details.chapters || [];\n    /**\n     * Song repost count\n     * @type {number}\n     */\n    this.reposts = 0;\n  }\n\n  /**\n   * Patch data from other source\n   * @param {OtherSongInfo} info Video info\n   * @private\n   */\n  _patchOther(info: OtherSongInfo) {\n    if (info.id) this.id = info.id;\n    if (info.title) this.name = info.title;\n    else if (info.name) this.name = info.name;\n    this.isLive = Boolean(info.is_live || info.isLive);\n    this.duration = this.isLive ? 0 : toSecond(info._duration_raw || info.duration);\n    this.formattedDuration = this.isLive ? \"Live\" : formatDuration(this.duration);\n    this.url = info.webpage_url || info.url;\n    this.thumbnail = info.thumbnail;\n    this.related = info.related || [];\n    this.views = parseNumber(info.view_count || info.views);\n    this.likes = parseNumber(info.like_count || info.likes);\n    this.dislikes = parseNumber(info.dislike_count || info.dislikes);\n    this.reposts = parseNumber(info.repost_count || info.reposts);\n    this.uploader = {\n      name: info.uploader,\n      url: info.uploader_url,\n    };\n    this.age_restricted = info.age_restricted || (!!info.age_limit && parseNumber(info.age_limit) >= 18);\n    this.chapters = info.chapters || [];\n  }\n\n  /**\n   * @param {Playlist} playlist Playlist\n   * @param {Discord.GuildMember} [member] Requested user\n   * @private\n   * @returns {Song}\n   */\n  _patchPlaylist(playlist: Playlist, member?: GuildMember) {\n    if (!(playlist instanceof Playlist)) throw new DisTubeError(\"INVALID_TYPE\", \"Playlist\", playlist, \"playlist\");\n\n    /**\n     * The playlist added this song\n     * @type {Playlist?}\n     */\n    this.playlist = playlist;\n    return this._patchMember(member);\n  }\n\n  /**\n   * @param {Discord.GuildMember} [member] Requested user\n   * @private\n   * @returns {Song}\n   */\n  _patchMember(member?: GuildMember) {\n    /**\n     * User requested\n     * @type {Discord.GuildMember?}\n     */\n    this.member = member;\n    /**\n     * User requested\n     * @type {Discord.User?}\n     */\n    this.user = member?.user;\n    return this;\n  }\n\n  /**\n   * @param {*} metadata Metadata\n   * @private\n   * @returns {Song}\n   */\n  _patchMetadata<S = unknown>(metadata: S) {\n    this.metadata = metadata as unknown as T;\n    return this as unknown as Song<S>;\n  }\n}\n"]}
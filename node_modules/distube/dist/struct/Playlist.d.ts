import type ytpl from "@distube/ytpl";
import type { PlaylistInfo, Song } from "..";
import type { GuildMember, User } from "discord.js";
/**
 * Class representing a playlist.
 * @prop {string} source Playlist source
 * @template T - The type for the metadata (if any) of the playlist
 */
export declare class Playlist<T = unknown> implements PlaylistInfo {
    source: string;
    songs: Song[];
    name: string;
    metadata: T;
    member?: GuildMember;
    user?: User;
    url?: string;
    thumbnail?: string;
    [x: string]: any;
    constructor(playlist: Song[] | ytpl.result | PlaylistInfo);
    /** @deprecated Passing GuildMember for DisTube#Playlist() is deprecated. */
    constructor(playlist: Song[] | ytpl.result | PlaylistInfo, member?: GuildMember, properties?: Record<string, any>, metadata?: T);
    /**
     * Create a playlist
     * @param {Song[]|PlaylistInfo} playlist Playlist
     * @param {Object} [options] Optional options
     * @param {Discord.GuildMember} [options.member] Requested user
     * @param {Object} [options.properties] Custom properties
     * @param {T} [options.metadata] Playlist metadata
     */
    constructor(playlist: Song[] | ytpl.result | PlaylistInfo, options?: {
        member?: GuildMember;
        properties?: Record<string, any>;
        metadata?: T;
    });
    /**
     * Playlist duration in second.
     * @type {number}
     */
    get duration(): number;
    /**
     * Formatted duration string `hh:mm:ss`.
     * @type {string}
     */
    get formattedDuration(): string;
    /**
     * @param {?Discord.GuildMember} [member] Requested user
     * @private
     * @returns {Playlist}
     */
    _patchMember(member?: GuildMember): this;
    /**
     * @param {*} metadata Metadata
     * @private
     * @returns {Playlist}
     */
    _patchMetadata<S = unknown>(metadata: S): Playlist<S>;
}
//# sourceMappingURL=Playlist.d.ts.map
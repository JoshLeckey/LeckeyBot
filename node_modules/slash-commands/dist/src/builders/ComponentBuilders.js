"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinkButtonBuilder = exports.ButtonBuilder = exports.ActionRowBuilder = exports.ComponentBuilder = void 0;
const components_1 = require("../structures/components");
class ComponentBuilder {
    constructor() {
        this.components = [];
    }
    addComponent(component) {
        if (this.components.length === 5) {
            throw new Error("A message can only have 5 top level components");
        }
        this.components.push(component);
        return this;
    }
    build() {
        return this.components;
    }
}
exports.ComponentBuilder = ComponentBuilder;
class ActionRowBuilder {
    constructor() {
        this.components = [];
    }
    addComponent(component) {
        if (this.components.length === 5) {
            throw new Error("A message can only have 5 top level components");
        }
        this.components.push(component);
        return this;
    }
    build() {
        return this.components;
    }
}
exports.ActionRowBuilder = ActionRowBuilder;
class ButtonBuilder {
    constructor() {
        this.type = 2;
        this.style = components_1.ButtonStyle.SECONDARY;
        this.disabled = false;
    }
    setDisabled(value) {
        this.disabled = value;
    }
    setStyle(style) {
        if (style === components_1.ButtonStyle.LINK) {
            throw new Error("The LINK ButtonStyle may only be used with link buttons, use the LinkButtonBuilder to create one");
        }
        this.style = style;
        return this;
    }
    setLabel(label) {
        if (label.length > 80) {
            throw new Error("Button labels must be 80 characters or less");
        }
        this.label = label;
        return this;
    }
    setEmoji(emoji) {
        this.emoji = emoji;
        return this;
    }
    setCustomId(id) {
        this.custom_id = id;
        return this;
    }
    build() {
        if (!this.custom_id)
            throw new Error("Standard buttons must have a custom_id");
        return {
            type: this.type,
            style: this.style,
            label: this.label,
            emoji: this.emoji,
            custom_id: this.custom_id,
            disabled: this.disabled,
        };
    }
}
exports.ButtonBuilder = ButtonBuilder;
class LinkButtonBuilder {
    constructor() {
        this.type = 2;
        this.style = components_1.ButtonStyle.LINK;
        this.disabled = false;
    }
    setDisabled(value) {
        this.disabled = value;
    }
    setLabel(label) {
        if (label.length > 80) {
            throw new Error("Button labels must be 80 characters or less");
        }
        this.label = label;
        return this;
    }
    setEmoji(emoji) {
        this.emoji = emoji;
        return this;
    }
    setUrl(url) {
        this.url = url;
        return this;
    }
    build() {
        if (!this.url)
            throw new Error("Link buttons must have a url");
        return {
            type: this.type,
            style: this.style,
            label: this.label,
            emoji: this.emoji,
            url: this.url,
            disabled: this.disabled,
        };
    }
}
exports.LinkButtonBuilder = LinkButtonBuilder;
